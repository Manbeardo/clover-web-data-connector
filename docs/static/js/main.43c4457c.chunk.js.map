{"version":3,"sources":["assets/error.jpg","../external \"tableau\"","components/Auth.tsx","CloverCredentials.tsx","CloverClient.tsx","components/Confirm.tsx","components/OauthCallback.tsx","components/App.tsx","tables/InventoryItems.tsx","tables/Categories.tsx","tables/InventoryItemCategories.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","tableau","Auth","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateInput","event","target","setState","state","formValues","objectSpread","defineProperty","id","value","submit","e","stopPropagation","params","URLSearchParams","key","append","console","log","toString","history","push","concat","manualForm","react","Form_default","a","onSubmit","Group","controlId","Label","Control","type","onChange","as","Button_default","className","variant","onClick","manualLogin","buttons","ButtonToolbar_default","href","merchant_id","access_token","environment","inherits","createClass","Component","getCredentialsFromLocation","loc","search","merchantID","get","accessToken","limit","pRateLimit","interval","rate","concurrency","cloverClient","do","_callee","path","opts","query","_key","response","regenerator_default","wrap","_context","prev","next","page","offset","creds","fetch","getCloverEndpoint","sent","ok","status","json","abrupt","stop","optsCopy","assign","method","getAll","_callee2","handler","_context2","elements","length","Confirm","callback","location","error","then","resp","merchantInfo","catch","err","Alert_default","Link","to","Image_default","src","errorImage","fluid","listEntries","merchant","name","ListGroup_default","Item","website","react_spinners","OauthCallback","apply","arguments","es_Redirect","App","confirmCallback","_this2","Container_default","HashRouter","hashType","Switch","Route","exact","component","render","Confirm_Confirm","Redirect","InventoryItems","schema","alias","columns","dataType","numberFormat","getRows","_getRows","asyncToGenerator","mark","table","rows","appendRows","map","row","price","cost","_x","_x2","Categories","modifiedTime","deleted","sortOrder","InventoryItemCategories","joinOnly","foreignKey","tableId","columnId","filterable","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_loop","_iterator","_step","undefined","category","itemID","categoryID","filterValues","Symbol","iterator","done","delegateYield","t1","return","finish","connector","makeConnector","tables","_arr","_i","tableInfo","password","init","authType","authTypeEnum","custom","connectionName","ReactDOM","react_default","createElement","App_App","username","phase","document","getElementById","getSchema","schemas","getData","abortWithError","registerConnector"],"mappings":"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","file":"static/js/main.43c4457c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error.6e9080df.jpg\";","module.exports = tableau;","import * as React from \"react\";\nimport {Component, FormEvent} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport {Route, RouteComponentProps, Switch} from \"react-router\";\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\n\ninterface AuthState {\n  manualLogin: boolean\n  formValues: { [key: string]: string }\n}\n\nexport class Auth extends Component<RouteComponentProps, AuthState> {\n  constructor(props: RouteComponentProps) {\n    super(props);\n\n    this.state = {\n      manualLogin: false,\n      formValues: {\n        \"merchant_id\": \"\",\n        \"access_token\": \"\",\n        \"environment\": \"prod\",\n      },\n    };\n  }\n\n  updateInput = (event: FormEvent<any>) => {\n    const target = event.target as HTMLInputElement;\n    this.setState((state) => {\n      return {\n        formValues: {\n          ...state.formValues,\n          [target.id]: target.value,\n        },\n      };\n    });\n  };\n\n  submit = (e: FormEvent) => {\n    e.stopPropagation();\n\n    let formValues = this.state.formValues;\n    let params = new URLSearchParams();\n    for (let key in formValues) {\n      params.append(key, formValues[key]);\n    }\n    console.log(params.toString());\n    this.props.history.push(`/oauth_callback?${params.toString()}`);\n  };\n\n  manualForm = () => {\n    return (\n      <Form onSubmit={this.submit}>\n        <Form.Group controlId=\"merchant_id\">\n          <Form.Label>Merchant ID</Form.Label>\n          <Form.Control type=\"text\" value={this.state.formValues[\"merchant_id\"]} onChange={this.updateInput}/>\n        </Form.Group>\n        <Form.Group controlId=\"access_token\">\n          <Form.Label>Access Token</Form.Label>\n          <Form.Control type=\"text\" value={this.state.formValues[\"access_token\"]} onChange={this.updateInput}/>\n        </Form.Group>\n        <Form.Group controlId=\"environment\">\n          <Form.Label>Environment</Form.Label>\n          <Form.Control as=\"select\" value={this.state.formValues[\"environment\"]} onChange={this.updateInput}>\n            <option value=\"prod\">prod (www.clover.com)</option>\n            <option value=\"sandbox\">sandbox (sandbox.dev.clover.com)</option>\n          </Form.Control>\n        </Form.Group>\n        <Button className=\"mr-1\" variant=\"primary\" type=\"submit\">\n          Login\n        </Button>\n        <Button className=\"ml-1\" variant=\"secondary\" onClick={() => this.setState({manualLogin: false})}>Back</Button>\n      </Form>\n    );\n  };\n\n  buttons = () => {\n    return (\n      <div>\n        <h2>Clover POS Web Data Connector</h2>\n        <ButtonToolbar>\n          <Button className=\"mr-1\" variant=\"primary\" href=\"https://clover-wdc.manbeardo.com/connect?environment=prod\">\n            Login with Clover\n          </Button>\n          <Button className=\"mx-1\" variant=\"secondary\"\n                  href=\"https://clover-wdc.manbeardo.com/connect?environment=sandbox\">\n            Login with Clover (Sandbox)\n          </Button>\n          <Button className=\"ml-1\" variant=\"secondary\" onClick={() => this.setState({manualLogin: true})}>\n            Login manually\n          </Button>\n        </ButtonToolbar>\n      </div>\n    );\n  };\n\n  render(): React.ReactNode {\n    if (this.state.manualLogin) {\n      return this.manualForm()\n    }\n    return this.buttons();\n  }\n}","import {Location} from \"history\";\n\nexport interface CloverCredentials {\n  readonly merchantID: string\n  readonly accessToken: string\n  readonly environment: string\n}\n\nexport function getCredentialsFromLocation(loc: Location): CloverCredentials {\n  let params = new URLSearchParams(loc.search);\n  return {\n    merchantID: params.get(\"merchant_id\")!!,\n    accessToken: params.get(\"access_token\")!!,\n    environment: params.get(\"environment\")!!,\n  };\n}\n\nexport function AddCredentialsToParams(params: URLSearchParams, creds: CloverCredentials) {\n  params.append(\"merchant_id\", creds.merchantID);\n  params.append(\"access_token\", creds.accessToken);\n  params.append(\"environment\", creds.environment);\n}","import {pRateLimit} from \"p-ratelimit\";\nimport {CloverCredentials} from \"./CloverCredentials\";\n\nconst limit = pRateLimit({\n  interval: 60 * 1000,\n  rate: 16,\n  concurrency: 5,\n});\n\nexport interface CloverClientOptions extends RequestInit {\n  creds: CloverCredentials\n  page?: {\n    limit: number,\n    offset: number\n  }\n  query?: { [key: string]: string }\n}\n\ninterface PaginatedResponse<T> {\n  elements: T[]\n  href: string\n}\n\nclass CloverClient {\n  readonly limit = pRateLimit({\n    interval: 60 * 1000,\n    rate: 16,\n    concurrency: 5,\n  });\n\n  readonly do = async <T extends {}>(path: string, opts: CloverClientOptions): Promise<T> => {\n    let query = new URLSearchParams();\n    for (let key in opts.query) {\n      query.append(key, opts.query[key]);\n    }\n    if (opts.page) {\n      query.append(\"limit\", opts.page.limit.toString());\n      query.append(\"offset\", opts.page.offset.toString());\n    }\n    query.append(\"access_token\", opts.creds.accessToken);\n\n    let response: Response = await limit(() => fetch(`${getCloverEndpoint(opts.creds)}${path}?${query}`, opts));\n    if (!response.ok) {\n      throw `clover api returned status code ${response.status}`;\n    }\n\n    return await response.json() as T;\n  };\n\n  readonly get = <T extends {}>(path: string, opts: CloverClientOptions): Promise<T> => {\n    const optsCopy = Object.assign({}, opts);\n    opts.method = \"GET\";\n    return this.do(path, optsCopy);\n  };\n\n  readonly getAll = async <T extends {}>(path: string, opts: CloverClientOptions, handler: (elems: T[]) => void | Promise<void>): Promise<void> => {\n    opts = Object.assign({}, opts); // copy opts because we'll mutate it later\n    const limit = 1000;\n    let offset = 0;\n    let response: PaginatedResponse<T>;\n    do {\n      opts.page = {\n        limit: limit,\n        offset: offset,\n      };\n      response = await this.get(path, opts);\n      await handler(response.elements);\n\n      offset += limit;\n    } while (response.elements.length > 0);\n  };\n}\n\nexport const cloverClient = new CloverClient();\n\nexport function getCloverEndpoint(creds: CloverCredentials) {\n  if (creds.environment === \"prod\") {\n    return \"https://api.clover.com\";\n  } else if (creds.environment === \"sandbox\") {\n    return \"https://apisandbox.dev.clover.com\";\n  }\n  throw `unknown environment: ${creds.environment}`;\n}","import * as React from \"react\";\nimport {Component} from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {CloverCredentials, getCredentialsFromLocation} from \"../CloverCredentials\";\nimport Alert from \"react-bootstrap/Alert\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Image from \"react-bootstrap/Image\";\nimport {SyncLoader} from \"react-spinners\";\nimport {cloverClient} from \"../CloverClient\";\nimport {RouteComponentProps} from \"react-router\";\nimport {Link} from \"react-router-dom\";\nimport errorImage from \"../assets/error.jpg\";\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\n\nexport interface ConfirmProps extends RouteComponentProps {\n  callback: (creds: CloverCredentials) => void\n}\n\ninterface GetMerchantResponse {\n  name: string\n  id?: string\n  website?: string\n  phoneNumber?: string\n}\n\ninterface ConfirmState {\n  creds: CloverCredentials\n  merchantInfo?: GetMerchantResponse\n  error: boolean\n}\n\nexport class Confirm extends Component<ConfirmProps, ConfirmState> {\n  constructor(props: ConfirmProps) {\n    super(props);\n    this.state = {\n      creds: getCredentialsFromLocation(props.location),\n      error: false,\n    };\n\n    cloverClient.get<GetMerchantResponse>(`/v3/merchants/${this.state.creds.merchantID}`, {\n      creds: this.state.creds,\n    }).then((resp) => this.setState({\n      merchantInfo: resp,\n    })).catch((err) => {\n      console.error(err);\n      this.setState({error: true});\n    });\n  }\n\n  submit = () => {\n    this.props.callback(this.state.creds);\n  };\n\n  render() {\n    if (this.state.error) {\n      return (\n        <div>\n          <Alert variant=\"danger\">\n            There was an error connecting to Clover.&nbsp;\n            <Alert.Link><Link to=\"/authorize\">Try connecting again.</Link></Alert.Link>\n          </Alert>\n          <Image src={errorImage} fluid/>\n        </div>);\n    }\n\n    let listEntries = [];\n    let merchant = this.state.merchantInfo;\n    if (merchant) {\n      if (merchant.name) {\n        listEntries.push(<ListGroup.Item key=\"name\"><b>Name:</b> {merchant.name}</ListGroup.Item>);\n      }\n      if (merchant.id) {\n        listEntries.push(<ListGroup.Item key=\"id\"><b>ID:</b> {merchant.id}</ListGroup.Item>);\n      }\n      if (merchant.website) {\n        listEntries.push(<ListGroup.Item key=\"website\"><b>Website:</b> {merchant.website}</ListGroup.Item>);\n      }\n      if (listEntries.length === 0) {\n        listEntries.push(<ListGroup.Item key=\"unknown\">???</ListGroup.Item>);\n      }\n      return (\n        <div>\n          <Alert variant=\"primary\">\n            Please confirm your business details\n          </Alert>\n          <ListGroup>\n            {listEntries}\n          </ListGroup>\n          <ButtonToolbar className=\"mt-3\">\n            <Button className=\"mr-1\" variant=\"primary\" onClick={this.submit}>Looks good!</Button>\n            <Link to=\"/authorize\"><Button className=\"ml-1\" variant=\"secondary\">Back</Button></Link>\n          </ButtonToolbar>\n        </div>\n      );\n    }\n\n    return (\n      <SyncLoader/>\n    );\n  }\n}","import {Component} from \"react\";\nimport {Redirect, RouteComponentProps} from \"react-router\";\nimport * as React from \"react\";\n\nexport class OauthCallback extends Component<RouteComponentProps> {\n  render() {\n    return <Redirect to={`/confirm${this.props.location.search}`}/>;\n  }\n}","import {Component} from \"react\";\nimport {PhaseEnumValue} from \"tableau\";\nimport * as React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport {Auth} from \"./Auth\";\nimport {Confirm} from \"./Confirm\";\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport {OauthCallback} from \"./OauthCallback\";\nimport {CloverCredentials, getCredentialsFromLocation} from \"../CloverCredentials\";\n\nexport interface AppProps {\n  phase: PhaseEnumValue\n  callback: (creds: CloverCredentials) => void\n}\n\nexport class App extends Component<AppProps> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {};\n  }\n\n  confirmCallback = (creds: CloverCredentials) => {\n    this.props.callback(creds);\n  };\n\n  render() {\n    return (\n      <Container className=\"mt-3\">\n        <HashRouter hashType={\"slash\"}>\n          <Switch>\n            <Route exact path=\"/authorize\" component={Auth}/>\n            <Route exact path=\"/oauth_callback\" component={OauthCallback}/>\n            <Route exact path=\"/confirm\"\n                   render={(props) => <Confirm {...props} callback={this.confirmCallback}/>}/>\n            <Route render={() => <Redirect to=\"/authorize\"/>}/>\n          </Switch>\n        </HashRouter>\n      </Container>\n    );\n  }\n}","import {TableType} from \"./TableType\";\nimport {cloverClient, getCloverEndpoint} from \"../CloverClient\";\n\nexport interface InventoryItem {\n  id: string,\n  hidden: boolean,\n  name: string,\n  price: number,\n  priceType: string,\n  defaultTaxRates: boolean,\n  cost: number,\n  isRevenue: boolean,\n  modifiedTime: number\n}\n\nexport const InventoryItems: TableType = {\n  schema: {\n    id: \"inventoryItems\",\n    alias: \"Inventory Items\",\n    columns: [\n      {\n        id: \"id\",\n        alias: \"item ID\",\n        dataType: \"string\",\n      },\n      {\n        id: \"hidden\",\n        dataType: \"bool\",\n      },\n      {\n        id: \"name\",\n        alias: \"item name\",\n        dataType: \"string\",\n      },\n      {\n        id: \"price\",\n        alias: \"item price\",\n        dataType: \"float\",\n        numberFormat: \"currency\",\n      },\n      {\n        id: \"priceType\",\n        alias: \"item price type\",\n        dataType: \"string\",\n      },\n      {\n        id: \"defaultTaxRates\",\n        alias: \"uses default tax rates\",\n        dataType: \"bool\",\n      },\n      {\n        id: \"cost\",\n        alias: \"item cost\",\n        dataType: \"float\",\n        numberFormat: \"currency\",\n      },\n      {\n        id: \"isRevenue\",\n        alias: \"is revenue\",\n        dataType: \"bool\",\n      },\n      {\n        id: \"modifiedTime\",\n        alias: \"last modified time\",\n        dataType: \"datetime\",\n      },\n    ],\n  },\n  getRows: async (table, creds) => {\n    await cloverClient.getAll<InventoryItem>(`/v3/merchants/${creds.merchantID}/items`, {\n      creds: creds,\n    }, (rows) => {\n      table.appendRows(rows.map((row) => {\n        row.price = row.price / 100;\n        row.cost = row.cost / 100;\n        return row;\n      }));\n    });\n  },\n};","import {TableType} from \"./TableType\";\nimport {cloverClient} from \"../CloverClient\";\nimport {InventoryItem} from \"./InventoryItems\";\n\nexport interface Category {\n  modifiedTime?: number,\n  deleted?: boolean,\n  sortOrder: number,\n  name: string,\n  id: string,\n  items?: InventoryItem[]\n}\n\nexport const Categories: TableType = {\n  schema: {\n    id: \"categories\",\n    alias: \"Categories\",\n    columns: [\n      {\n        id: \"modifiedTime\",\n        alias: \"last modified time\",\n        dataType: \"datetime\",\n      },\n      {\n        id: \"deleted\",\n        alias: \"is deleted\",\n        dataType: \"bool\",\n      },\n      {\n        id: \"sortOrder\",\n        alias: \"sort order\",\n        dataType: \"int\",\n      },\n      {\n        id: \"name\",\n        alias: \"category name\",\n        dataType: \"string\",\n      },\n      {\n        id: \"id\",\n        alias: \"category ID\",\n        dataType: \"string\",\n      },\n    ],\n  },\n  getRows: async (table, creds) => {\n    await cloverClient.getAll<Category>(`/v3/merchants/${creds.merchantID}/categories`, {\n      creds: creds,\n    }, (rows) => {\n      table.appendRows(rows.map((row) => {\n        return {\n          modifiedTime: row.modifiedTime,\n          deleted: row.deleted,\n          sortOrder: row.sortOrder,\n          name: row.name,\n          id: row.id,\n        };\n      }));\n    });\n  },\n};","import {TableType} from \"./TableType\";\nimport {cloverClient} from \"../CloverClient\";\nimport {InventoryItem} from \"./InventoryItems\";\nimport {Categories} from \"./Categories\";\n\nexport const InventoryItemCategories: TableType = {\n  schema: {\n    id: \"inventoryItemCategories\",\n    alias: \"Inventory item categories\",\n    joinOnly: true,\n    foreignKey: {\n      tableId: Categories.schema.id,\n      columnId: \"id\",\n    },\n    columns: [\n      {\n        id: \"itemID\",\n        alias: \"item ID\",\n        dataType: \"string\",\n      },\n      {\n        id: \"categoryID\",\n        alias: \"category ID\",\n        dataType: \"string\",\n        filterable: true,\n      },\n    ],\n  },\n  getRows: async (table, creds) => {\n    for (let category of table.filterValues!! as string[]) {\n      await cloverClient.getAll<InventoryItem>(`/v3/merchants/${creds.merchantID}/categories/${category}/items`, {\n        creds: creds,\n      }, (rows) => {\n        table.appendRows(rows.map((row) => {\n          return {\n            \"itemID\": row.id,\n            \"categoryID\": category,\n          };\n        }));\n      });\n    }\n  },\n};","import \"core-js/features/map\"\nimport \"core-js/features/set\"\nimport \"core-js/features/url\";\nimport \"core-js/features/url-search-params\";\nimport \"raf/polyfill\";\nimport \"whatwg-fetch\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport tableau, {Table, TableInfo} from \"tableau\";\nimport {App} from \"./components/App\";\nimport {InventoryItems} from \"./tables/InventoryItems\";\nimport {TableType} from \"./tables/TableType\";\nimport {CloverCredentials} from \"./CloverCredentials\";\nimport {InventoryItemCategories} from \"./tables/InventoryItemCategories\";\nimport {Categories} from \"./tables/Categories\";\n\nconst connector = tableau.makeConnector();\n\nconst tables = (() => {\n  let tables: { [id: string]: TableType } = {};\n  for (let table of [\n    Categories,\n    InventoryItems,\n    InventoryItemCategories,\n  ]) {\n    tables[table.schema.id] = table;\n  }\n  return tables;\n})();\n\nconnector.init = (callback) => {\n  tableau.authType = tableau.authTypeEnum.custom;\n  tableau.connectionName = \"Clover POS\";\n\n  let appCallback = (creds: CloverCredentials) => {\n    tableau.username = \"\";\n    tableau.password = creds;\n    tableau.submit();\n  };\n\n  ReactDOM.render(<App callback={appCallback} phase={tableau.phase}/>, document.getElementById(\"root\"));\n\n  callback();\n};\n\nconnector.getSchema = (callback) => {\n  let schemas: TableInfo[] = [];\n  for (let id in tables) {\n    schemas.push(tables[id].schema);\n  }\n  callback(schemas);\n};\n\nasync function getData(table: Table): Promise<void> {\n  let type = tables[table.tableInfo.id];\n  await type.getRows(table, tableau.password as CloverCredentials);\n}\n\nconnector.getData = (table, callback) => {\n  getData(table)\n    .then(() => callback())\n    .catch((err) => tableau.abortWithError(err));\n};\n\ntableau.registerConnector(connector);\n"],"sourceRoot":""}